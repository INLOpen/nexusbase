# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import tsdb_pb2 as tsdb__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tsdb_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TSDBServiceStub(object):
    """TSDBService defines the gRPC service for Time Series Database operations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Put = channel.unary_unary(
                '/tsdb.TSDBService/Put',
                request_serializer=tsdb__pb2.PutRequest.SerializeToString,
                response_deserializer=tsdb__pb2.PutResponse.FromString,
                _registered_method=True)
        self.PutBatch = channel.unary_unary(
                '/tsdb.TSDBService/PutBatch',
                request_serializer=tsdb__pb2.PutBatchRequest.SerializeToString,
                response_deserializer=tsdb__pb2.PutBatchResponse.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/tsdb.TSDBService/Get',
                request_serializer=tsdb__pb2.GetRequest.SerializeToString,
                response_deserializer=tsdb__pb2.GetResponse.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/tsdb.TSDBService/Delete',
                request_serializer=tsdb__pb2.DeleteRequest.SerializeToString,
                response_deserializer=tsdb__pb2.DeleteResponse.FromString,
                _registered_method=True)
        self.DeleteSeries = channel.unary_unary(
                '/tsdb.TSDBService/DeleteSeries',
                request_serializer=tsdb__pb2.DeleteSeriesRequest.SerializeToString,
                response_deserializer=tsdb__pb2.DeleteSeriesResponse.FromString,
                _registered_method=True)
        self.DeletesByTimeRange = channel.unary_unary(
                '/tsdb.TSDBService/DeletesByTimeRange',
                request_serializer=tsdb__pb2.DeletesByTimeRangeRequest.SerializeToString,
                response_deserializer=tsdb__pb2.DeletesByTimeRangeResponse.FromString,
                _registered_method=True)
        self.Query = channel.unary_stream(
                '/tsdb.TSDBService/Query',
                request_serializer=tsdb__pb2.QueryRequest.SerializeToString,
                response_deserializer=tsdb__pb2.QueryResult.FromString,
                _registered_method=True)
        self.CreateSnapshot = channel.unary_unary(
                '/tsdb.TSDBService/CreateSnapshot',
                request_serializer=tsdb__pb2.CreateSnapshotRequest.SerializeToString,
                response_deserializer=tsdb__pb2.CreateSnapshotResponse.FromString,
                _registered_method=True)
        self.GetSeriesByTags = channel.unary_unary(
                '/tsdb.TSDBService/GetSeriesByTags',
                request_serializer=tsdb__pb2.GetSeriesByTagsRequest.SerializeToString,
                response_deserializer=tsdb__pb2.GetSeriesByTagsResponse.FromString,
                _registered_method=True)
        self.Subscribe = channel.unary_stream(
                '/tsdb.TSDBService/Subscribe',
                request_serializer=tsdb__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=tsdb__pb2.DataPointUpdate.FromString,
                _registered_method=True)
        self.ForceFlush = channel.unary_unary(
                '/tsdb.TSDBService/ForceFlush',
                request_serializer=tsdb__pb2.ForceFlushRequest.SerializeToString,
                response_deserializer=tsdb__pb2.ForceFlushResponse.FromString,
                _registered_method=True)


class TSDBServiceServicer(object):
    """TSDBService defines the gRPC service for Time Series Database operations.
    """

    def Put(self, request, context):
        """Put stores a new data point or a structured event for a time series. (FR1.1)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutBatch(self, request, context):
        """PutBatch stores a batch of new data points.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Get retrieves a single data point at a specific timestamp. (FR1.3)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete marks a single data point for deletion. (FR1.2)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSeries(self, request, context):
        """DeleteSeries marks an entire series for deletion. (FR1.5)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletesByTimeRange(self, request, context):
        """DeleteDataPointsByTimeRange marks a time range within a series for deletion. (FR1.2)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Query retrieves data points or aggregated results for a specified time range. (FR1.4)
        Use stream for potentially large results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSnapshot(self, request, context):
        """CreateSnapshot triggers the creation of a database snapshot. (FR5.2)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSeriesByTags(self, request, context):
        """GetSeriesByTags retrieves a list of unique series identifiers that match the given criteria. (FR1.6)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Subscribe listens for real-time data point updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForceFlush(self, request, context):
        """Forces a flush of the current in-memory memtable to an SSTable on disk.
        This is primarily for testing and administrative purposes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TSDBServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Put': grpc.unary_unary_rpc_method_handler(
                    servicer.Put,
                    request_deserializer=tsdb__pb2.PutRequest.FromString,
                    response_serializer=tsdb__pb2.PutResponse.SerializeToString,
            ),
            'PutBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PutBatch,
                    request_deserializer=tsdb__pb2.PutBatchRequest.FromString,
                    response_serializer=tsdb__pb2.PutBatchResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=tsdb__pb2.GetRequest.FromString,
                    response_serializer=tsdb__pb2.GetResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=tsdb__pb2.DeleteRequest.FromString,
                    response_serializer=tsdb__pb2.DeleteResponse.SerializeToString,
            ),
            'DeleteSeries': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSeries,
                    request_deserializer=tsdb__pb2.DeleteSeriesRequest.FromString,
                    response_serializer=tsdb__pb2.DeleteSeriesResponse.SerializeToString,
            ),
            'DeletesByTimeRange': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletesByTimeRange,
                    request_deserializer=tsdb__pb2.DeletesByTimeRangeRequest.FromString,
                    response_serializer=tsdb__pb2.DeletesByTimeRangeResponse.SerializeToString,
            ),
            'Query': grpc.unary_stream_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=tsdb__pb2.QueryRequest.FromString,
                    response_serializer=tsdb__pb2.QueryResult.SerializeToString,
            ),
            'CreateSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSnapshot,
                    request_deserializer=tsdb__pb2.CreateSnapshotRequest.FromString,
                    response_serializer=tsdb__pb2.CreateSnapshotResponse.SerializeToString,
            ),
            'GetSeriesByTags': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSeriesByTags,
                    request_deserializer=tsdb__pb2.GetSeriesByTagsRequest.FromString,
                    response_serializer=tsdb__pb2.GetSeriesByTagsResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=tsdb__pb2.SubscribeRequest.FromString,
                    response_serializer=tsdb__pb2.DataPointUpdate.SerializeToString,
            ),
            'ForceFlush': grpc.unary_unary_rpc_method_handler(
                    servicer.ForceFlush,
                    request_deserializer=tsdb__pb2.ForceFlushRequest.FromString,
                    response_serializer=tsdb__pb2.ForceFlushResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tsdb.TSDBService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tsdb.TSDBService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TSDBService(object):
    """TSDBService defines the gRPC service for Time Series Database operations.
    """

    @staticmethod
    def Put(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tsdb.TSDBService/Put',
            tsdb__pb2.PutRequest.SerializeToString,
            tsdb__pb2.PutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PutBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tsdb.TSDBService/PutBatch',
            tsdb__pb2.PutBatchRequest.SerializeToString,
            tsdb__pb2.PutBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tsdb.TSDBService/Get',
            tsdb__pb2.GetRequest.SerializeToString,
            tsdb__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tsdb.TSDBService/Delete',
            tsdb__pb2.DeleteRequest.SerializeToString,
            tsdb__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSeries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tsdb.TSDBService/DeleteSeries',
            tsdb__pb2.DeleteSeriesRequest.SerializeToString,
            tsdb__pb2.DeleteSeriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletesByTimeRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tsdb.TSDBService/DeletesByTimeRange',
            tsdb__pb2.DeletesByTimeRangeRequest.SerializeToString,
            tsdb__pb2.DeletesByTimeRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tsdb.TSDBService/Query',
            tsdb__pb2.QueryRequest.SerializeToString,
            tsdb__pb2.QueryResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tsdb.TSDBService/CreateSnapshot',
            tsdb__pb2.CreateSnapshotRequest.SerializeToString,
            tsdb__pb2.CreateSnapshotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSeriesByTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tsdb.TSDBService/GetSeriesByTags',
            tsdb__pb2.GetSeriesByTagsRequest.SerializeToString,
            tsdb__pb2.GetSeriesByTagsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tsdb.TSDBService/Subscribe',
            tsdb__pb2.SubscribeRequest.SerializeToString,
            tsdb__pb2.DataPointUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ForceFlush(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tsdb.TSDBService/ForceFlush',
            tsdb__pb2.ForceFlushRequest.SerializeToString,
            tsdb__pb2.ForceFlushResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
