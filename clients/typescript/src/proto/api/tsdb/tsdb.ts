/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.31.1
 * source: api/tsdb/tsdb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./..\\..\\google\\protobuf\\struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace tsdb {
    export class PutRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            tags?: Map<string, string>;
            timestamp?: number;
            fields?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
            }
            if (!this.tags)
                this.tags = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get fields() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 4) as dependency_1.google.protobuf.Struct;
        }
        set fields(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_fields() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            metric?: string;
            tags?: {
                [key: string]: string;
            };
            timestamp?: number;
            fields?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): PutRequest {
            const message = new PutRequest({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.fields != null) {
                message.fields = dependency_1.google.protobuf.Struct.fromObject(data.fields);
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                tags?: {
                    [key: string]: string;
                };
                timestamp?: number;
                fields?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.fields != null) {
                data.fields = this.fields.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            for (const [key, value] of this.tags) {
                writer.writeMessage(2, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.has_fields)
                writer.writeMessage(4, this.fields, () => this.fields.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.fields, () => message.fields = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PutRequest {
            return PutRequest.deserialize(bytes);
        }
    }
    export class PutResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PutResponse {
            const message = new PutResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PutResponse {
            return PutResponse.deserialize(bytes);
        }
    }
    export class PutBatchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            points?: PutRequest[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
            }
        }
        get points() {
            return pb_1.Message.getRepeatedWrapperField(this, PutRequest, 1) as PutRequest[];
        }
        set points(value: PutRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            points?: ReturnType<typeof PutRequest.prototype.toObject>[];
        }): PutBatchRequest {
            const message = new PutBatchRequest({});
            if (data.points != null) {
                message.points = data.points.map(item => PutRequest.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                points?: ReturnType<typeof PutRequest.prototype.toObject>[];
            } = {};
            if (this.points != null) {
                data.points = this.points.map((item: PutRequest) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.points.length)
                writer.writeRepeatedMessage(1, this.points, (item: PutRequest) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutBatchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutBatchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.points, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PutRequest.deserialize(reader), PutRequest));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PutBatchRequest {
            return PutBatchRequest.deserialize(bytes);
        }
    }
    export class PutBatchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PutBatchResponse {
            const message = new PutBatchResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutBatchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutBatchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PutBatchResponse {
            return PutBatchResponse.deserialize(bytes);
        }
    }
    export class GetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            tags?: Map<string, string>;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
            if (!this.tags)
                this.tags = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            metric?: string;
            tags?: {
                [key: string]: string;
            };
            timestamp?: number;
        }): GetRequest {
            const message = new GetRequest({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                tags?: {
                    [key: string]: string;
                };
                timestamp?: number;
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            for (const [key, value] of this.tags) {
                writer.writeMessage(2, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRequest {
            return GetRequest.deserialize(bytes);
        }
    }
    export class GetResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fields?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
            }
        }
        get fields() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 1) as dependency_1.google.protobuf.Struct;
        }
        set fields(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_fields() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            fields?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): GetResponse {
            const message = new GetResponse({});
            if (data.fields != null) {
                message.fields = dependency_1.google.protobuf.Struct.fromObject(data.fields);
            }
            return message;
        }
        toObject() {
            const data: {
                fields?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.fields != null) {
                data.fields = this.fields.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_fields)
                writer.writeMessage(1, this.fields, () => this.fields.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.fields, () => message.fields = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetResponse {
            return GetResponse.deserialize(bytes);
        }
    }
    export class DeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            tags?: Map<string, string>;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
            if (!this.tags)
                this.tags = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            metric?: string;
            tags?: {
                [key: string]: string;
            };
            timestamp?: number;
        }): DeleteRequest {
            const message = new DeleteRequest({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                tags?: {
                    [key: string]: string;
                };
                timestamp?: number;
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            for (const [key, value] of this.tags) {
                writer.writeMessage(2, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRequest {
            return DeleteRequest.deserialize(bytes);
        }
    }
    export class DeleteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteResponse {
            const message = new DeleteResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteResponse {
            return DeleteResponse.deserialize(bytes);
        }
    }
    export class DeleteSeriesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            tags?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
            if (!this.tags)
                this.tags = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            metric?: string;
            tags?: {
                [key: string]: string;
            };
        }): DeleteSeriesRequest {
            const message = new DeleteSeriesRequest({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                tags?: {
                    [key: string]: string;
                };
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            for (const [key, value] of this.tags) {
                writer.writeMessage(2, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSeriesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSeriesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSeriesRequest {
            return DeleteSeriesRequest.deserialize(bytes);
        }
    }
    export class DeleteSeriesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteSeriesResponse {
            const message = new DeleteSeriesResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSeriesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSeriesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSeriesResponse {
            return DeleteSeriesResponse.deserialize(bytes);
        }
    }
    export class DeletesByTimeRangeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            tags?: Map<string, string>;
            start_time?: number;
            end_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
            }
            if (!this.tags)
                this.tags = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            metric?: string;
            tags?: {
                [key: string]: string;
            };
            start_time?: number;
            end_time?: number;
        }): DeletesByTimeRangeRequest {
            const message = new DeletesByTimeRangeRequest({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                tags?: {
                    [key: string]: string;
                };
                start_time?: number;
                end_time?: number;
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            for (const [key, value] of this.tags) {
                writer.writeMessage(2, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.start_time != 0)
                writer.writeInt64(3, this.start_time);
            if (this.end_time != 0)
                writer.writeInt64(4, this.end_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletesByTimeRangeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeletesByTimeRangeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.start_time = reader.readInt64();
                        break;
                    case 4:
                        message.end_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeletesByTimeRangeRequest {
            return DeletesByTimeRangeRequest.deserialize(bytes);
        }
    }
    export class DeletesByTimeRangeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeletesByTimeRangeResponse {
            const message = new DeletesByTimeRangeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeletesByTimeRangeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeletesByTimeRangeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeletesByTimeRangeResponse {
            return DeletesByTimeRangeResponse.deserialize(bytes);
        }
    }
    export class QueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            start_time?: number;
            end_time?: number;
            tags?: Map<string, string>;
            aggregation_specs?: AggregationSpec[];
            downsample_interval?: string;
            emit_empty_windows?: boolean;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("aggregation_specs" in data && data.aggregation_specs != undefined) {
                    this.aggregation_specs = data.aggregation_specs;
                }
                if ("downsample_interval" in data && data.downsample_interval != undefined) {
                    this.downsample_interval = data.downsample_interval;
                }
                if ("emit_empty_windows" in data && data.emit_empty_windows != undefined) {
                    this.emit_empty_windows = data.emit_empty_windows;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
            if (!this.tags)
                this.tags = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get aggregation_specs() {
            return pb_1.Message.getRepeatedWrapperField(this, AggregationSpec, 5) as AggregationSpec[];
        }
        set aggregation_specs(value: AggregationSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get downsample_interval() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set downsample_interval(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get emit_empty_windows() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set emit_empty_windows(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            metric?: string;
            start_time?: number;
            end_time?: number;
            tags?: {
                [key: string]: string;
            };
            aggregation_specs?: ReturnType<typeof AggregationSpec.prototype.toObject>[];
            downsample_interval?: string;
            emit_empty_windows?: boolean;
            limit?: number;
        }): QueryRequest {
            const message = new QueryRequest({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            if (data.aggregation_specs != null) {
                message.aggregation_specs = data.aggregation_specs.map(item => AggregationSpec.fromObject(item));
            }
            if (data.downsample_interval != null) {
                message.downsample_interval = data.downsample_interval;
            }
            if (data.emit_empty_windows != null) {
                message.emit_empty_windows = data.emit_empty_windows;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                start_time?: number;
                end_time?: number;
                tags?: {
                    [key: string]: string;
                };
                aggregation_specs?: ReturnType<typeof AggregationSpec.prototype.toObject>[];
                downsample_interval?: string;
                emit_empty_windows?: boolean;
                limit?: number;
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            if (this.aggregation_specs != null) {
                data.aggregation_specs = this.aggregation_specs.map((item: AggregationSpec) => item.toObject());
            }
            if (this.downsample_interval != null) {
                data.downsample_interval = this.downsample_interval;
            }
            if (this.emit_empty_windows != null) {
                data.emit_empty_windows = this.emit_empty_windows;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            if (this.start_time != 0)
                writer.writeInt64(2, this.start_time);
            if (this.end_time != 0)
                writer.writeInt64(3, this.end_time);
            for (const [key, value] of this.tags) {
                writer.writeMessage(4, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.aggregation_specs.length)
                writer.writeRepeatedMessage(5, this.aggregation_specs, (item: AggregationSpec) => item.serialize(writer));
            if (this.downsample_interval.length)
                writer.writeString(6, this.downsample_interval);
            if (this.emit_empty_windows != false)
                writer.writeBool(7, this.emit_empty_windows);
            if (this.limit != 0)
                writer.writeInt64(8, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        message.start_time = reader.readInt64();
                        break;
                    case 3:
                        message.end_time = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    case 5:
                        reader.readMessage(message.aggregation_specs, () => pb_1.Message.addToRepeatedWrapperField(message, 5, AggregationSpec.deserialize(reader), AggregationSpec));
                        break;
                    case 6:
                        message.downsample_interval = reader.readString();
                        break;
                    case 7:
                        message.emit_empty_windows = reader.readBool();
                        break;
                    case 8:
                        message.limit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryRequest {
            return QueryRequest.deserialize(bytes);
        }
    }
    export class AggregationSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            function?: AggregationSpec.AggregationFunc;
            field?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("function" in data && data.function != undefined) {
                    this.function = data.function;
                }
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
            }
        }
        get function() {
            return pb_1.Message.getFieldWithDefault(this, 1, AggregationSpec.AggregationFunc.NONE) as AggregationSpec.AggregationFunc;
        }
        set function(value: AggregationSpec.AggregationFunc) {
            pb_1.Message.setField(this, 1, value);
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set field(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            function?: AggregationSpec.AggregationFunc;
            field?: string;
        }): AggregationSpec {
            const message = new AggregationSpec({});
            if (data.function != null) {
                message.function = data.function;
            }
            if (data.field != null) {
                message.field = data.field;
            }
            return message;
        }
        toObject() {
            const data: {
                function?: AggregationSpec.AggregationFunc;
                field?: string;
            } = {};
            if (this.function != null) {
                data.function = this.function;
            }
            if (this.field != null) {
                data.field = this.field;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.function != AggregationSpec.AggregationFunc.NONE)
                writer.writeEnum(1, this.function);
            if (this.field.length)
                writer.writeString(2, this.field);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AggregationSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AggregationSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.function = reader.readEnum();
                        break;
                    case 2:
                        message.field = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AggregationSpec {
            return AggregationSpec.deserialize(bytes);
        }
    }
    export namespace AggregationSpec {
        export enum AggregationFunc {
            NONE = 0,
            SUM = 1,
            COUNT = 2,
            AVERAGE = 3,
            MIN = 4,
            MAX = 5,
            FIRST = 6,
            LAST = 7
        }
    }
    export class QueryResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            tags?: Map<string, string>;
            timestamp?: number;
            fields?: dependency_1.google.protobuf.Struct;
            window_start_time?: number;
            window_end_time?: number;
            aggregated_values?: Map<string, number>;
            is_aggregated?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
                if ("window_start_time" in data && data.window_start_time != undefined) {
                    this.window_start_time = data.window_start_time;
                }
                if ("window_end_time" in data && data.window_end_time != undefined) {
                    this.window_end_time = data.window_end_time;
                }
                if ("aggregated_values" in data && data.aggregated_values != undefined) {
                    this.aggregated_values = data.aggregated_values;
                }
                if ("is_aggregated" in data && data.is_aggregated != undefined) {
                    this.is_aggregated = data.is_aggregated;
                }
            }
            if (!this.tags)
                this.tags = new Map();
            if (!this.aggregated_values)
                this.aggregated_values = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get fields() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 4) as dependency_1.google.protobuf.Struct;
        }
        set fields(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_fields() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get window_start_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set window_start_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get window_end_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set window_end_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get aggregated_values() {
            return pb_1.Message.getField(this, 7) as any as Map<string, number>;
        }
        set aggregated_values(value: Map<string, number>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        get is_aggregated() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set is_aggregated(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            metric?: string;
            tags?: {
                [key: string]: string;
            };
            timestamp?: number;
            fields?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            window_start_time?: number;
            window_end_time?: number;
            aggregated_values?: {
                [key: string]: number;
            };
            is_aggregated?: boolean;
        }): QueryResult {
            const message = new QueryResult({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.fields != null) {
                message.fields = dependency_1.google.protobuf.Struct.fromObject(data.fields);
            }
            if (data.window_start_time != null) {
                message.window_start_time = data.window_start_time;
            }
            if (data.window_end_time != null) {
                message.window_end_time = data.window_end_time;
            }
            if (typeof data.aggregated_values == "object") {
                message.aggregated_values = new Map(Object.entries(data.aggregated_values));
            }
            if (data.is_aggregated != null) {
                message.is_aggregated = data.is_aggregated;
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                tags?: {
                    [key: string]: string;
                };
                timestamp?: number;
                fields?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
                window_start_time?: number;
                window_end_time?: number;
                aggregated_values?: {
                    [key: string]: number;
                };
                is_aggregated?: boolean;
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.fields != null) {
                data.fields = this.fields.toObject();
            }
            if (this.window_start_time != null) {
                data.window_start_time = this.window_start_time;
            }
            if (this.window_end_time != null) {
                data.window_end_time = this.window_end_time;
            }
            if (this.aggregated_values != null) {
                data.aggregated_values = (Object.fromEntries)(this.aggregated_values);
            }
            if (this.is_aggregated != null) {
                data.is_aggregated = this.is_aggregated;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            for (const [key, value] of this.tags) {
                writer.writeMessage(2, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.timestamp != 0)
                writer.writeInt64(3, this.timestamp);
            if (this.has_fields)
                writer.writeMessage(4, this.fields, () => this.fields.serialize(writer));
            if (this.window_start_time != 0)
                writer.writeInt64(5, this.window_start_time);
            if (this.window_end_time != 0)
                writer.writeInt64(6, this.window_end_time);
            for (const [key, value] of this.aggregated_values) {
                writer.writeMessage(7, this.aggregated_values, () => {
                    writer.writeString(1, key);
                    writer.writeDouble(2, value);
                });
            }
            if (this.is_aggregated != false)
                writer.writeBool(8, this.is_aggregated);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.timestamp = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.fields, () => message.fields = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    case 5:
                        message.window_start_time = reader.readInt64();
                        break;
                    case 6:
                        message.window_end_time = reader.readInt64();
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.aggregated_values as any, reader, reader.readString, reader.readDouble));
                        break;
                    case 8:
                        message.is_aggregated = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryResult {
            return QueryResult.deserialize(bytes);
        }
    }
    export class CreateSnapshotRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            snapshot_dir?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("snapshot_dir" in data && data.snapshot_dir != undefined) {
                    this.snapshot_dir = data.snapshot_dir;
                }
            }
        }
        get snapshot_dir() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set snapshot_dir(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            snapshot_dir?: string;
        }): CreateSnapshotRequest {
            const message = new CreateSnapshotRequest({});
            if (data.snapshot_dir != null) {
                message.snapshot_dir = data.snapshot_dir;
            }
            return message;
        }
        toObject() {
            const data: {
                snapshot_dir?: string;
            } = {};
            if (this.snapshot_dir != null) {
                data.snapshot_dir = this.snapshot_dir;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.snapshot_dir.length)
                writer.writeString(1, this.snapshot_dir);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSnapshotRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSnapshotRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.snapshot_dir = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSnapshotRequest {
            return CreateSnapshotRequest.deserialize(bytes);
        }
    }
    export class CreateSnapshotResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CreateSnapshotResponse {
            const message = new CreateSnapshotResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSnapshotResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSnapshotResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSnapshotResponse {
            return CreateSnapshotResponse.deserialize(bytes);
        }
    }
    export class GetSeriesByTagsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            tags?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
            if (!this.tags)
                this.tags = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            metric?: string;
            tags?: {
                [key: string]: string;
            };
        }): GetSeriesByTagsRequest {
            const message = new GetSeriesByTagsRequest({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                tags?: {
                    [key: string]: string;
                };
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            for (const [key, value] of this.tags) {
                writer.writeMessage(2, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSeriesByTagsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSeriesByTagsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSeriesByTagsRequest {
            return GetSeriesByTagsRequest.deserialize(bytes);
        }
    }
    export class GetSeriesByTagsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            series_keys?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("series_keys" in data && data.series_keys != undefined) {
                    this.series_keys = data.series_keys;
                }
            }
        }
        get series_keys() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set series_keys(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            series_keys?: string[];
        }): GetSeriesByTagsResponse {
            const message = new GetSeriesByTagsResponse({});
            if (data.series_keys != null) {
                message.series_keys = data.series_keys;
            }
            return message;
        }
        toObject() {
            const data: {
                series_keys?: string[];
            } = {};
            if (this.series_keys != null) {
                data.series_keys = this.series_keys;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.series_keys.length)
                writer.writeRepeatedString(1, this.series_keys);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSeriesByTagsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSeriesByTagsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetSeriesByTagsResponse {
            return GetSeriesByTagsResponse.deserialize(bytes);
        }
    }
    export class SubscribeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metric?: string;
            tags?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
            if (!this.tags)
                this.tags = new Map();
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            metric?: string;
            tags?: {
                [key: string]: string;
            };
        }): SubscribeRequest {
            const message = new SubscribeRequest({});
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            return message;
        }
        toObject() {
            const data: {
                metric?: string;
                tags?: {
                    [key: string]: string;
                };
            } = {};
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metric.length)
                writer.writeString(1, this.metric);
            for (const [key, value] of this.tags) {
                writer.writeMessage(2, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscribeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscribeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.metric = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscribeRequest {
            return SubscribeRequest.deserialize(bytes);
        }
    }
    export class DataPointUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            update_type?: DataPointUpdate.UpdateType;
            metric?: string;
            tags?: Map<string, string>;
            timestamp?: number;
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("update_type" in data && data.update_type != undefined) {
                    this.update_type = data.update_type;
                }
                if ("metric" in data && data.metric != undefined) {
                    this.metric = data.metric;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
            if (!this.tags)
                this.tags = new Map();
        }
        get update_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, DataPointUpdate.UpdateType.PUT) as DataPointUpdate.UpdateType;
        }
        set update_type(value: DataPointUpdate.UpdateType) {
            pb_1.Message.setField(this, 1, value);
        }
        get metric() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set metric(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set tags(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            update_type?: DataPointUpdate.UpdateType;
            metric?: string;
            tags?: {
                [key: string]: string;
            };
            timestamp?: number;
            value?: number;
        }): DataPointUpdate {
            const message = new DataPointUpdate({});
            if (data.update_type != null) {
                message.update_type = data.update_type;
            }
            if (data.metric != null) {
                message.metric = data.metric;
            }
            if (typeof data.tags == "object") {
                message.tags = new Map(Object.entries(data.tags));
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                update_type?: DataPointUpdate.UpdateType;
                metric?: string;
                tags?: {
                    [key: string]: string;
                };
                timestamp?: number;
                value?: number;
            } = {};
            if (this.update_type != null) {
                data.update_type = this.update_type;
            }
            if (this.metric != null) {
                data.metric = this.metric;
            }
            if (this.tags != null) {
                data.tags = (Object.fromEntries)(this.tags);
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.update_type != DataPointUpdate.UpdateType.PUT)
                writer.writeEnum(1, this.update_type);
            if (this.metric.length)
                writer.writeString(2, this.metric);
            for (const [key, value] of this.tags) {
                writer.writeMessage(3, this.tags, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (this.value != 0)
                writer.writeDouble(5, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataPointUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataPointUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.update_type = reader.readEnum();
                        break;
                    case 2:
                        message.metric = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    case 5:
                        message.value = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataPointUpdate {
            return DataPointUpdate.deserialize(bytes);
        }
    }
    export namespace DataPointUpdate {
        export enum UpdateType {
            PUT = 0,
            DELETE = 1,
            DELETE_SERIES = 2,
            DELETE_RANGE = 3
        }
    }
    export class ForceFlushRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ForceFlushRequest {
            const message = new ForceFlushRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForceFlushRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForceFlushRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForceFlushRequest {
            return ForceFlushRequest.deserialize(bytes);
        }
    }
    export class ForceFlushResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ForceFlushResponse {
            const message = new ForceFlushResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForceFlushResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForceFlushResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForceFlushResponse {
            return ForceFlushResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTSDBServiceService {
        static definition = {
            Put: {
                path: "/tsdb.TSDBService/Put",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PutRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PutRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PutResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PutResponse.deserialize(new Uint8Array(bytes))
            },
            PutBatch: {
                path: "/tsdb.TSDBService/PutBatch",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PutBatchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PutBatchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PutBatchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PutBatchResponse.deserialize(new Uint8Array(bytes))
            },
            Get: {
                path: "/tsdb.TSDBService/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/tsdb.TSDBService/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteSeries: {
                path: "/tsdb.TSDBService/DeleteSeries",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteSeriesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteSeriesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteSeriesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteSeriesResponse.deserialize(new Uint8Array(bytes))
            },
            DeletesByTimeRange: {
                path: "/tsdb.TSDBService/DeletesByTimeRange",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeletesByTimeRangeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeletesByTimeRangeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeletesByTimeRangeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeletesByTimeRangeResponse.deserialize(new Uint8Array(bytes))
            },
            Query: {
                path: "/tsdb.TSDBService/Query",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: QueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryResult) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryResult.deserialize(new Uint8Array(bytes))
            },
            CreateSnapshot: {
                path: "/tsdb.TSDBService/CreateSnapshot",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateSnapshotRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateSnapshotRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateSnapshotResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateSnapshotResponse.deserialize(new Uint8Array(bytes))
            },
            GetSeriesByTags: {
                path: "/tsdb.TSDBService/GetSeriesByTags",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetSeriesByTagsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetSeriesByTagsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetSeriesByTagsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetSeriesByTagsResponse.deserialize(new Uint8Array(bytes))
            },
            Subscribe: {
                path: "/tsdb.TSDBService/Subscribe",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: SubscribeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SubscribeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DataPointUpdate) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DataPointUpdate.deserialize(new Uint8Array(bytes))
            },
            ForceFlush: {
                path: "/tsdb.TSDBService/ForceFlush",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ForceFlushRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ForceFlushRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ForceFlushResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ForceFlushResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Put(call: grpc_1.ServerUnaryCall<PutRequest, PutResponse>, callback: grpc_1.sendUnaryData<PutResponse>): void;
        abstract PutBatch(call: grpc_1.ServerUnaryCall<PutBatchRequest, PutBatchResponse>, callback: grpc_1.sendUnaryData<PutBatchResponse>): void;
        abstract Get(call: grpc_1.ServerUnaryCall<GetRequest, GetResponse>, callback: grpc_1.sendUnaryData<GetResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<DeleteRequest, DeleteResponse>, callback: grpc_1.sendUnaryData<DeleteResponse>): void;
        abstract DeleteSeries(call: grpc_1.ServerUnaryCall<DeleteSeriesRequest, DeleteSeriesResponse>, callback: grpc_1.sendUnaryData<DeleteSeriesResponse>): void;
        abstract DeletesByTimeRange(call: grpc_1.ServerUnaryCall<DeletesByTimeRangeRequest, DeletesByTimeRangeResponse>, callback: grpc_1.sendUnaryData<DeletesByTimeRangeResponse>): void;
        abstract Query(call: grpc_1.ServerWritableStream<QueryRequest, QueryResult>): void;
        abstract CreateSnapshot(call: grpc_1.ServerUnaryCall<CreateSnapshotRequest, CreateSnapshotResponse>, callback: grpc_1.sendUnaryData<CreateSnapshotResponse>): void;
        abstract GetSeriesByTags(call: grpc_1.ServerUnaryCall<GetSeriesByTagsRequest, GetSeriesByTagsResponse>, callback: grpc_1.sendUnaryData<GetSeriesByTagsResponse>): void;
        abstract Subscribe(call: grpc_1.ServerWritableStream<SubscribeRequest, DataPointUpdate>): void;
        abstract ForceFlush(call: grpc_1.ServerUnaryCall<ForceFlushRequest, ForceFlushResponse>, callback: grpc_1.sendUnaryData<ForceFlushResponse>): void;
    }
    export class TSDBServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTSDBServiceService.definition, "TSDBService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Put: GrpcUnaryServiceInterface<PutRequest, PutResponse> = (message: PutRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PutResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PutResponse>, callback?: grpc_1.requestCallback<PutResponse>): grpc_1.ClientUnaryCall => {
            return super.Put(message, metadata, options, callback);
        };
        PutBatch: GrpcUnaryServiceInterface<PutBatchRequest, PutBatchResponse> = (message: PutBatchRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PutBatchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PutBatchResponse>, callback?: grpc_1.requestCallback<PutBatchResponse>): grpc_1.ClientUnaryCall => {
            return super.PutBatch(message, metadata, options, callback);
        };
        Get: GrpcUnaryServiceInterface<GetRequest, GetResponse> = (message: GetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetResponse>, callback?: grpc_1.requestCallback<GetResponse>): grpc_1.ClientUnaryCall => {
            return super.Get(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<DeleteRequest, DeleteResponse> = (message: DeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteResponse>, callback?: grpc_1.requestCallback<DeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
        DeleteSeries: GrpcUnaryServiceInterface<DeleteSeriesRequest, DeleteSeriesResponse> = (message: DeleteSeriesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteSeriesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteSeriesResponse>, callback?: grpc_1.requestCallback<DeleteSeriesResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteSeries(message, metadata, options, callback);
        };
        DeletesByTimeRange: GrpcUnaryServiceInterface<DeletesByTimeRangeRequest, DeletesByTimeRangeResponse> = (message: DeletesByTimeRangeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeletesByTimeRangeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeletesByTimeRangeResponse>, callback?: grpc_1.requestCallback<DeletesByTimeRangeResponse>): grpc_1.ClientUnaryCall => {
            return super.DeletesByTimeRange(message, metadata, options, callback);
        };
        Query: GrpcStreamServiceInterface<QueryRequest, QueryResult> = (message: QueryRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<QueryResult> => {
            return super.Query(message, metadata, options);
        };
        CreateSnapshot: GrpcUnaryServiceInterface<CreateSnapshotRequest, CreateSnapshotResponse> = (message: CreateSnapshotRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateSnapshotResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateSnapshotResponse>, callback?: grpc_1.requestCallback<CreateSnapshotResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateSnapshot(message, metadata, options, callback);
        };
        GetSeriesByTags: GrpcUnaryServiceInterface<GetSeriesByTagsRequest, GetSeriesByTagsResponse> = (message: GetSeriesByTagsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetSeriesByTagsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetSeriesByTagsResponse>, callback?: grpc_1.requestCallback<GetSeriesByTagsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetSeriesByTags(message, metadata, options, callback);
        };
        Subscribe: GrpcStreamServiceInterface<SubscribeRequest, DataPointUpdate> = (message: SubscribeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<DataPointUpdate> => {
            return super.Subscribe(message, metadata, options);
        };
        ForceFlush: GrpcUnaryServiceInterface<ForceFlushRequest, ForceFlushResponse> = (message: ForceFlushRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ForceFlushResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ForceFlushResponse>, callback?: grpc_1.requestCallback<ForceFlushResponse>): grpc_1.ClientUnaryCall => {
            return super.ForceFlush(message, metadata, options, callback);
        };
    }
}
